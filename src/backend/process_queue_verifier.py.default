# This file is part of Open-Capture.

# Open-Capture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Open-Capture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Open-Capture. If not, see <https://www.gnu.org/licenses/gpl-3.0.html>.

# @dev : Nathan Cheval <nathan.cheval@outlook.fr>

import os
import time
import tempfile
from kuyruk import Kuyruk
from src.backend.functions import recursive_delete, get_custom_array
from src.backend.import_classes import _Files, _Log, _SeparatorQR, _Mail
from src.backend.main import create_classes_from_custom_id, check_file, timer, str2bool

custom_array = get_custom_array()

if 'OCForInvoices' not in custom_array:
    from src.backend.process import OCForInvoices as OCForInvoices_process
else:
    OCForInvoices_process = getattr(__import__(custom_array['OCForInvoices']['path'],
                                               fromlist=[custom_array['OCForInvoices']['module']]),
                                    custom_array['OCForInvoices']['module'])

kuyruk = Kuyruk()


def execute(args, path, log, config, files, ocr, regex, database, docservers, configurations, languages, mail, smtp):
    if check_file(files, path, log, docservers):
        res = OCForInvoices_process.process(args, path, log, config, files, ocr, regex, database, docservers,
                                            configurations, languages)
        if not res:
            if args.get('isMail') is not None and args['isMail'] is True:
                mail.move_batch_to_error(args['batch_path'], args['error_path'], smtp, args['process_name'], args['msg'])
                log.error('Error while processing e-mail', False)
            return False
    else:
        return False
    return True


@kuyruk.task(queue='verifier_§§CUSTOM_ID§§')
def launch(args):
    start = time.time()

    database, config, regex, _, ocr, log, _, _, smtp, docservers, configurations, languages = create_classes_from_custom_id(args['custom_id'], True)
    task_id = database.insert({
        'table': 'tasks_watcher',
        'columns': {
            'title': os.path.basename(args['file']),
            'type': 'upload',
            'module': 'verifier',
        }
    })

    log.task_id = task_id
    log.database = database

    tmp_folder = tempfile.mkdtemp(dir=docservers['TMP_PATH'])
    with tempfile.NamedTemporaryFile(dir=tmp_folder) as tmp_file:
        filename = tmp_file.name

    try:
        os.chmod(tmp_folder, int('775', base=8))
    except OSError:
        pass

    files = _Files(filename, log, docservers, configurations, regex, languages, database)

    remove_blank_pages = False
    splitter_method = False
    if 'input_id' in args:
        input_settings = database.select({
            'select': ['*'],
            'table': ['inputs'],
            'where': ['input_id = %s', 'module = %s'],
            'data': [args['input_id'], 'verifier']
        })

        if input_settings:
            splitter_method = input_settings[0]['splitter_method_id']
            remove_blank_pages = input_settings[0]['remove_blank_pages']

    separator_qr = _SeparatorQR(log, config, tmp_folder, 'verifier', files, remove_blank_pages, docservers)
    mail_class = None

    if args.get('isMail') is not None and args['isMail'] is True:
        mail_class = _Mail(
            args['process']['hostname'],
            args['process']['port'],
            args['process']['login'],
            args['process']['password']
        )
        log = _Log((args['log']), smtp)
        log.info('Process attachment n°' + args['cpt'] + '/' + args['nb_of_attachments'])

    if args.get('isMail') is None or args.get('isMail') is False:
        if splitter_method and splitter_method == 'qr_code_OC':
            separator_qr.enabled = True

    database.connect()
    process_err = False

    if 'file' in args and args['file'] is not None:
        path = args['file']
        log.filename = os.path.basename(path)
        if separator_qr.enabled:
            if check_file(files, path, log, docservers):
                separator_qr.run(path)
            path = separator_qr.output_dir_pdfa if str2bool(separator_qr.convert_to_pdfa) is True else separator_qr.output_dir

            for file in os.listdir(path):
                res = execute(args, path + file, log, config, files, ocr, regex, database, docservers, configurations,
                              languages, mail_class, smtp)
                if not res:
                    process_err = True
        elif splitter_method == 'separate_by_document':
            list_of_files = separator_qr.split_document_every_two_pages(path)
            for file in list_of_files:
                res = execute(args, file, log, config, files, ocr, regex, database, docservers, configurations,
                              languages, mail_class, smtp)
                if not res:
                    process_err = True
            os.remove(path)
        else:
            try:
                res = execute(args, path, log, config, files, ocr, regex, database, docservers, configurations,
                              languages, mail_class, smtp)
                if not res:
                    process_err = True
            except Exception as _e:
                process_err = True
                _e = _e.__class__.__name__ + ' : ' + str(_e)
                log.error(_e)

    recursive_delete(tmp_folder, log)
    if not process_err:
        database.update({
            'table': ['tasks_watcher'],
            'set': {
                'status': 'done',
                'end_date': time.strftime("%Y-%m-%d %H:%M:%S")
            },
            'where': ['id = %s'],
            'data': [task_id]
        })
    database.conn.close()
    end = time.time()
    log.info('Process end after ' + timer(start, end) + '')
