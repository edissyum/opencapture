# This file is part of Open-Capture.

# Open-Capture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Open-Capture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Open-Capture. If not, see <https://www.gnu.org/licenses/gpl-3.0.html>.

# @dev : Nathan Cheval <nathan.cheval@outlook.fr>

import os
import time
import facturx
import tempfile
import traceback
from lxml import etree
from kuyruk import Kuyruk
from flask_babel import gettext
from src.backend.functions import recursive_delete, get_custom_array
from src.backend.import_classes import _Files, _Log, _SeparatorQR, _Mail
from src.backend.main import create_classes_from_custom_id, check_file, timer, str2bool

custom_array = get_custom_array()

if 'main' not in custom_array:
    from src.backend.process import main
else:
    main = getattr(__import__(custom_array['main']['path'],
                                         fromlist=[custom_array['main']['module']]),
                              custom_array['main']['module'])

if 'factur_x' not in custom_array:
    from src.backend.process import factur_x
else:
    factur_x = getattr(__import__(custom_array['factur_x']['path'], fromlist=[custom_array['factur_x']['module']]),
                       custom_array['factur_x']['module'])

kuyruk = Kuyruk()


def execute(args, path, log, config, files, ocr, regex, database, docservers, configurations, languages, mail, smtp):
    if check_file(files, path, log, docservers):
        is_facturx = False
        with open(path, 'rb') as _f:
            _, xml_content = facturx.get_facturx_xml_from_pdf(_f.read())
            if _ is not None:
                is_facturx = True

        if not is_facturx:
            skip = res = False
            if 'workflow_id' in args and args['workflow_id']:
                workflow_settings = database.select({
                    'select': ['input'],
                    'table': ['workflows'],
                    'where': ['workflow_id = %s', 'module = %s'],
                    'data': [args['workflow_id'], 'verifier']
                })

                if workflow_settings:
                    if workflow_settings[0]['input']['facturx_only']:
                        log.info('FacturX only workflow, skipping this document')
                        skip = True

            if not skip:
                res = main.process(args, path, log, config, files, ocr, regex, database, docservers,
                                            configurations, languages)
        else:
            parsed_xml = etree.fromstring(xml_content)
            args['facturx_level'] = facturx.get_facturx_level(parsed_xml)
            log.info(f"FacturX detected. Level is {args['facturx_level']}")
            args['log'] = log
            args['files'] = files
            args['regex'] = regex
            args['database'] = database
            args['docservers'] = docservers
            args['xml_content'] = xml_content
            args['configurations'] = configurations
            res = factur_x.process(args)
        if not res:
            if args.get('isMail') is not None and args['isMail'] is True:
                mail.move_batch_to_error(args['batch_path'], args['error_path'], smtp, args['process_name'],
                                         args['msg'])
                log.error('Error while processing e-mail', False)
            return False
    else:
        return False
    return res


@kuyruk.task(queue='verifier_§§CUSTOM_ID§§')
def launch(args):
    start = time.time()

    database, config, regex, _, ocr, log, _, _, smtp, docservers, configurations, languages, _ = create_classes_from_custom_id(
        args['custom_id'], True)

    if 'log' in args:
        log = args['log']

    database.update({
        'table': ['monitoring'],
        'set': {
            'creation_date': time.strftime("%Y-%m-%d %H:%M:%S"),
            'status': 'running'
        },
        'where': ['id = %s'],
        'data': [args['task_id_monitor']]
    })

    log.task_id_monitor = args['task_id_monitor']
    log.database = database

    tmp_folder = tempfile.mkdtemp(dir=docservers['TMP_PATH'])
    with tempfile.NamedTemporaryFile(dir=tmp_folder) as tmp_file:
        filename = tmp_file.name

    try:
        os.chmod(tmp_folder, int('775', base=8))
    except OSError:
        pass

    files = _Files(filename, log, docservers, configurations, regex, languages, database)

    remove_blank_pages = splitter_method = False
    separate_every_x_page = 0

    if 'workflow_id' in args and args['workflow_id']:
        workflow_settings = database.select({
            'select': ['input'],
            'table': ['workflows'],
            'where': ['workflow_id = %s', 'module = %s'],
            'data': [args['workflow_id'], 'verifier']
        })

        if workflow_settings:
            splitter_method = workflow_settings[0]['input']['splitter_method_id']
            remove_blank_pages = workflow_settings[0]['input']['remove_blank_pages']
            if splitter_method == 'separate_by_document_number':
                separate_every_x_page = workflow_settings[0]['input']['separate_by_document_number_value']

    separator_qr = _SeparatorQR(log, config, tmp_folder, 'verifier', files, remove_blank_pages, docservers,
                                splitter_method)
    mail_class = None

    if args.get('isMail') is not None and args['isMail'] is True:
        mail_class = _Mail(
            args['process']['hostname'],
            args['process']['port'],
            args['process']['login'],
            args['process']['password']
        )
        log = _Log((args['log']), smtp)
        log.info('Process attachment n°' + args['cpt'] + '/' + args['nb_of_attachments'])

    if args.get('isMail') is None or args.get('isMail') is False:
        if splitter_method and splitter_method != 'no_sep':
            sep_style = ''
            if splitter_method == 'separate_by_document_number':
                sep_style = 'every ' + str(separate_every_x_page) + ' page(s)'

            if splitter_method in ['qr_code_OC', 'c128_OC']:
                separator_qr.enabled = True
                sep_style = 'by QR code' if splitter_method == 'qr_code_OC' else 'Code 128'

            log.info('Separation ' + sep_style + ' enabled')

    database.connect()
    res = None
    list_of_ids = []

    if 'file' in args and args['file'] is not None:
        path = args['file']
        log.filename = os.path.basename(path)
        try:
            if separator_qr.enabled:
                if check_file(files, path, log, docservers):
                    separator_qr.run(path)
                path = separator_qr.output_dir_pdfa if str2bool(
                    separator_qr.convert_to_pdfa) is True else separator_qr.output_dir

                for file in os.listdir(path):
                    res = execute(args, path + file, log, config, files, ocr, regex, database, docservers,
                                  configurations,
                                  languages, mail_class, smtp)
                    list_of_ids.append(res)
            elif splitter_method == 'separate_by_document_number':
                list_of_files = separator_qr.split_document_every_x_pages(path, separate_every_x_page)
                for file in list_of_files:
                    res = execute(args, file, log, config, files, ocr, regex, database, docservers, configurations,
                                  languages, mail_class, smtp)
                    list_of_ids.append(res)
                os.remove(path)
            else:
                res = execute(args, path, log, config, files, ocr, regex, database, docservers, configurations,
                              languages, mail_class, smtp)
                list_of_ids.append(res)
        except Exception:
            _e = str(traceback.format_exc())
            log.error(_e)

    recursive_delete(tmp_folder, log)

    end = time.time()
    _timer = timer(start, end)

    log.info('Process end after ' + _timer + '')
    database.update({
        'table': ['monitoring'],
        'set': {
            'token': args['token'] if 'token' in args and args['token'] else None,
            'elapsed_time': _timer,
            'document_ids': list_of_ids if res else None,
            'status': 'done',
            'end_date': time.strftime("%Y-%m-%d %H:%M:%S")
        },
        'where': ['id = %s'],
        'data': [args['task_id_monitor']]
    })

    database.insert({
        'table': 'history',
        'columns': {
            'history_module': 'verifier',
            'user_info': args['user_info'],
            'history_submodule': 'upload_file',
            'history_desc': gettext('FILE_UPLOADED_WORKFLOW') + '&nbsp<strong>' + args['workflow_id'] + '</strong>',
            'user_ip': args['ip']
        }
    })
    database.conn.close()
